{"version":3,"sources":["App.tsx","index.tsx"],"names":["SortType","goodsFromServer","App","state","isStarted","isReversed","sortType","NONE","newGoods","goods","visibleGoods","ALPABET","sort","a","b","localeCompare","LENGTH","length","reverse","getReorderedGoods","this","className","type","onClick","setState","prevState","map","good","nanoid","Component","ReactDOM","render","document","getElementById"],"mappings":"iKAkBKA,E,gFAbCC,EAAkB,CACtB,YACA,SACA,OACA,YACA,QACA,QACA,OACA,QACA,MACA,W,SAGGD,O,eAAAA,I,qBAAAA,I,oBAAAA,M,KAkCE,IAAME,EAAb,4MACEC,MAAQ,CACNC,WAAW,EACXC,YAAY,EACZC,SAAUN,EAASO,MAJvB,4CAOE,WAAU,IAAD,OACDC,EAnCV,SACEC,EACAH,EACAD,GAEA,IAAMK,EAAY,YAAOD,GAEzB,OAAQH,GACN,KAAKN,EAASW,QACZD,EAAaE,MAAK,SAACC,EAAGC,GAAJ,OAAUD,EAAEE,cAAcD,MAC5C,MACF,KAAKd,EAASgB,OACZN,EAAaE,MAAK,SAACC,EAAGC,GAAJ,OAAUD,EAAEI,OAASH,EAAEG,UAM7C,OAAOZ,EAAaK,EAAaQ,UAAYR,EAiB1BS,CACflB,EACAmB,KAAKjB,MAAMG,SACXc,KAAKjB,MAAME,YAGb,OACE,sBAAKgB,UAAU,YAAf,WACID,KAAKjB,MAAMC,WACX,wBACEkB,KAAK,SACLD,UAAU,oBACVE,QAAS,WACP,EAAKC,SAAS,CAAEpB,WAAW,KAJ/B,mBAUDgB,KAAKjB,MAAMC,WACV,qCACE,wBACEkB,KAAK,SACLD,UAAS,iBAAYD,KAAKjB,MAAMG,WAAaN,EAASW,QAAU,aAAe,aAC/EY,QAAS,WACP,EAAKC,SAAS,CAAElB,SAAUN,EAASW,WAJvC,iCAUA,wBACEW,KAAK,SACLD,UAAS,iBAAYD,KAAKjB,MAAMG,WAAaN,EAASgB,OAAS,aAAe,aAC9EO,QAAS,WACP,EAAKC,SAAS,CAAElB,SAAUN,EAASgB,UAJvC,4BAUA,wBACEM,KAAK,SACLD,UAAS,iBAAYD,KAAKjB,MAAME,WAAa,aAAe,aAC5DkB,QAAS,WACP,EAAKC,UAAS,SAACC,GAAD,MAAgB,CAC5BpB,YAAaoB,EAAUpB,gBAL7B,qBAYA,wBACEiB,KAAK,SACLD,UAAS,iBAAYD,KAAKjB,MAAMG,WAAaN,EAASO,MAChDa,KAAKjB,MAAME,WAA4B,YAAf,cAC9BkB,QAAS,WACP,EAAKC,SAAS,CAAElB,SAAUN,EAASO,KAAMF,YAAY,KALzD,mBAWA,oBAAIgB,UAAU,QAAd,SACGb,EAASkB,KAAI,SAAAC,GAAI,OAChB,oBAAIN,UAAU,eAAd,SAA6CM,GAAXC,8BA1ElD,GAAyBC,aCjDzBC,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.48b05668.chunk.js","sourcesContent":["/* eslint-disable @typescript-eslint/no-unused-vars */\nimport { Component } from 'react';\nimport './App.css';\nimport { nanoid } from 'nanoid';\n\nconst goodsFromServer = [\n  'Dumplings',\n  'Carrot',\n  'Eggs',\n  'Ice cream',\n  'Apple',\n  'Bread',\n  'Fish',\n  'Honey',\n  'Jam',\n  'Garlic',\n];\n\nenum SortType {\n  NONE,\n  ALPABET,\n  LENGTH,\n}\n\n// Use this function in the render method\nfunction getReorderedGoods(\n  goods: string[],\n  sortType: SortType,\n  isReversed: boolean,\n) {\n  const visibleGoods = [...goods];\n\n  switch (sortType) {\n    case SortType.ALPABET:\n      visibleGoods.sort((a, b) => a.localeCompare(b));\n      break;\n    case SortType.LENGTH:\n      visibleGoods.sort((a, b) => a.length - b.length);\n      break;\n    default:\n      break;\n  }\n\n  return isReversed ? visibleGoods.reverse() : visibleGoods;\n}\n\ntype State = {\n  isStarted: boolean,\n  isReversed: boolean,\n  sortType: SortType,\n};\n\nexport class App extends Component<{}, State> {\n  state = {\n    isStarted: false,\n    isReversed: false,\n    sortType: SortType.NONE,\n  };\n\n  render() {\n    const newGoods = getReorderedGoods(\n      goodsFromServer,\n      this.state.sortType,\n      this.state.isReversed,\n    );\n\n    return (\n      <div className=\"App panel\">\n        {!this.state.isStarted && (\n          <button\n            type=\"button\"\n            className=\"button is-success\"\n            onClick={() => {\n              this.setState({ isStarted: true });\n            }}\n          >\n            Start\n          </button>\n        )}\n        {this.state.isStarted && (\n          <>\n            <button\n              type=\"button\"\n              className={`button ${this.state.sortType === SortType.ALPABET ? 'is-success' : 'is-danger'}`}\n              onClick={() => {\n                this.setState({ sortType: SortType.ALPABET });\n              }}\n            >\n              Sort alphabetically\n            </button>\n\n            <button\n              type=\"button\"\n              className={`button ${this.state.sortType === SortType.LENGTH ? 'is-success' : 'is-danger'}`}\n              onClick={() => {\n                this.setState({ sortType: SortType.LENGTH });\n              }}\n            >\n              Sort by length\n            </button>\n\n            <button\n              type=\"button\"\n              className={`button ${this.state.isReversed ? 'is-success' : 'is-danger'}`}\n              onClick={() => {\n                this.setState((prevState) => ({\n                  isReversed: !prevState.isReversed,\n                }));\n              }}\n            >\n              Reverse\n            </button>\n\n            <button\n              type=\"button\"\n              className={`button ${this.state.sortType === SortType.NONE\n                && !this.state.isReversed ? 'is-success' : 'is-danger'}`}\n              onClick={() => {\n                this.setState({ sortType: SortType.NONE, isReversed: false });\n              }}\n            >\n              Reset\n            </button>\n\n            <ul className=\"Goods\">\n              {newGoods.map(good => (\n                <li className=\"Goods__items\" key={nanoid()}>{good}</li>\n              ))}\n            </ul>\n          </>\n        )}\n      </div>\n    );\n  }\n}\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}